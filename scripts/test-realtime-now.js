import { createClient } from '@supabase/supabase-js'

// Configuraci√≥n de Supabase
const SUPABASE_URL = process.env.SUPABASE_URL || process.env.VITE_SUPABASE_URL
const SUPABASE_ANON_KEY = process.env.SUPABASE_ANON_KEY || process.env.VITE_SUPABASE_ANON_KEY

if (!SUPABASE_URL || !SUPABASE_ANON_KEY) {
  console.error('‚ùå Faltan SUPABASE_URL/SUPABASE_ANON_KEY (o VITE_*) en el entorno')
  process.exit(1)
}

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY, {
  realtime: {
    params: {
      eventsPerSecond: 10
    }
  }
})

console.log('üî• TEST DIRECTO DE REALTIME - DIAGN√ìSTICO EXTREMO')
console.log('=' * 60)

async function testRealtimeNow() {
  try {
    // 1. Verificar conexi√≥n b√°sica
    console.log('\nüîå 1. Verificando conexi√≥n b√°sica...')
    const { data: conversations, error } = await supabase
      .from('tb_conversations')
      .select('*')
      .limit(1)
    
    if (error) {
      console.log('‚ùå Error de conexi√≥n:', error.message)
      return
    }
    
    console.log('‚úÖ Conexi√≥n b√°sica funciona')
    console.log('üìä Conversaciones disponibles:', conversations?.length || 0)
    
    if (!conversations || conversations.length === 0) {
      console.log('‚ö†Ô∏è No hay conversaciones para probar')
      return
    }
    
    // 2. Test de inserci√≥n manual en tb_messages
    console.log('\nüì® 2. Probando inserci√≥n de mensaje...')
    
    const testMessage = {
      conversation_id: conversations[0].id,
      content: `Test message ${new Date().toISOString()}`,
      sender_role: 'agent',
      agent_email: 'test@test.com',
      agent_name: 'Test Agent'
    }
    
    console.log('üì§ Insertando mensaje de prueba...')
    const { data: insertResult, error: insertError } = await supabase
      .from('tb_messages')
      .insert(testMessage)
      .select()
    
    if (insertError) {
      console.log('‚ùå Error insertando mensaje:', insertError.message)
      return
    }
    
    console.log('‚úÖ Mensaje insertado exitosamente:', insertResult)
    
    // 3. Test de actualizaci√≥n de conversaci√≥n
    console.log('\nüîÑ 3. Probando actualizaci√≥n de conversaci√≥n...')
    
    const currentStatus = conversations[0].status
    const newStatus = currentStatus === 'pending_human' ? 'active_human' : 'pending_human'
    
    console.log(`üìä Cambiando estado de ${currentStatus} a ${newStatus}`)
    
    const { data: updateResult, error: updateError } = await supabase
      .from('tb_conversations')
      .update({ 
        status: newStatus,
        updated_at: new Date().toISOString()
      })
      .eq('id', conversations[0].id)
      .select()
    
    if (updateError) {
      console.log('‚ùå Error actualizando conversaci√≥n:', updateError.message)
      return
    }
    
    console.log('‚úÖ Conversaci√≥n actualizada exitosamente:', updateResult)
    
    // 4. Test de Realtime con promesas
    console.log('\nüì° 4. Configurando escucha de Realtime...')
    
    let messageReceived = false
    let conversationReceived = false
    
    // Canal para mensajes
    const messageChannel = supabase
      .channel('test-messages-now')
      .on(
        'postgres_changes',
        { event: 'INSERT', schema: 'public', table: 'tb_messages' },
        (payload) => {
          console.log('üéâ ¬°MENSAJE DETECTADO EN REALTIME!', payload.new)
          messageReceived = true
        }
      )
      .subscribe((status) => {
        console.log('üì° Estado canal mensajes:', status)
      })
    
    // Canal para conversaciones
    const conversationChannel = supabase
      .channel('test-conversations-now')
      .on(
        'postgres_changes',
        { event: 'UPDATE', schema: 'public', table: 'tb_conversations' },
        (payload) => {
          console.log('üéâ ¬°CONVERSACI√ìN DETECTADA EN REALTIME!', payload.new)
          conversationReceived = true
        }
      )
      .subscribe((status) => {
        console.log('üì° Estado canal conversaciones:', status)
      })
    
    // Esperar 3 segundos para que se conecten
    console.log('\n‚è≥ Esperando 3 segundos para conexi√≥n...')
    await new Promise(resolve => setTimeout(resolve, 3000))
    
    // 5. Hacer cambios reales para probar Realtime
    console.log('\nüß™ 5. Haciendo cambios para probar Realtime...')
    
    // Insertar otro mensaje
    const testMessage2 = {
      conversation_id: conversations[0].id,
      content: `Realtime test message ${new Date().toISOString()}`,
      sender_role: 'user'
    }
    
    console.log('üì§ Insertando segundo mensaje...')
    await supabase.from('tb_messages').insert(testMessage2)
    
    // Cambiar estado de vuelta
    console.log('üîÑ Cambiando estado de vuelta...')
    await supabase
      .from('tb_conversations')
      .update({ 
        status: currentStatus,
        updated_at: new Date().toISOString()
      })
      .eq('id', conversations[0].id)
    
    // Esperar eventos Realtime
    console.log('\n‚è≥ Esperando 5 segundos para eventos de Realtime...')
    let timeout = false
    const timeoutPromise = new Promise(resolve => {
      setTimeout(() => {
        timeout = true
        resolve(false)
      }, 15000)
    })
    
    const eventPromise = new Promise(resolve => {
      const checkEvent = () => {
        if (conversationReceived) {
          resolve(true)
        } else if (!timeout) {
          setTimeout(checkEvent, 100)
        } else {
          resolve(false)
        }
      }
      checkEvent()
    })
    
    const eventResult = await Promise.race([eventPromise, timeoutPromise])
    
    if (eventResult) {
      console.log('‚úÖ Evento Realtime recibido exitosamente')
    } else {
      console.log('‚ùå Timeout esperando evento Realtime')
    }
    
    // Limpiar
    messageChannel.unsubscribe()
    conversationChannel.unsubscribe()
    
  } catch (error) {
    console.log('‚ùå Error en test:', error)
  }
}

// Ejecutar
testRealtimeNow()
  .then(() => {
    console.log('\nüèÅ Test completado')
    process.exit(0)
  })
  .catch(error => {
    console.log('‚ùå Error fatal:', error)
    process.exit(1)
  })

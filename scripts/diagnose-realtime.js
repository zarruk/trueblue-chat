import { createClient } from '@supabase/supabase-js'

// Configuraci√≥n de Supabase
const SUPABASE_URL = "https://avkpygwhymnxotwqzknz.supabase.co"
const SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImF2a3B5Z3doeW1ueG90d3F6a256Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTMzMjEyMDcsImV4cCI6MjA2ODg5NzIwN30.p97K1S3WYNAeYb-ExRpRp3J_pqFegFJ11VOe5th_xHk"

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY)

console.log('üîç DIAGN√ìSTICO COMPLETO DE REALTIME')
console.log('=' * 50)

async function diagnoseRealtime() {
  try {
    // Test 1: Verificar configuraci√≥n de Realtime en Supabase
    console.log('\nüîå Test 1: Verificando configuraci√≥n de Realtime...')
    
    // Verificar si las tablas est√°n habilitadas para Realtime
    const { data: realtimeTables, error: realtimeError } = await supabase
      .from('information_schema.tables')
      .select('table_name')
      .eq('table_schema', 'public')
      .eq('table_name', 'tb_conversations')
    
    if (realtimeError) {
      console.log('‚ùå Error verificando tablas de Realtime:', realtimeError.message)
    } else {
      console.log('‚úÖ Tabla tb_conversations existe')
    }
    
    // Test 2: Verificar publicaci√≥n supabase_realtime
    console.log('\nüì° Test 2: Verificando publicaci√≥n supabase_realtime...')
    
    try {
      const { data: publicationData, error: pubError } = await supabase
        .rpc('get_realtime_publication_info')
      
      if (pubError) {
        console.log('‚ö†Ô∏è No se puede verificar publicaci√≥n via RPC:', pubError.message)
        console.log('üí° Esto es normal, continuando con otros tests...')
      } else {
        console.log('‚úÖ Informaci√≥n de publicaci√≥n obtenida:', publicationData)
      }
    } catch (e) {
      console.log('‚ö†Ô∏è RPC no disponible, continuando...')
    }
    
    // Test 3: Verificar conexi√≥n b√°sica
    console.log('\nüîå Test 3: Verificando conexi√≥n b√°sica...')
    
    const { data: conversations, error: connError } = await supabase
      .from('tb_conversations')
      .select('*')
      .limit(1)
    
    if (connError) {
      console.log('‚ùå Error de conexi√≥n:', connError.message)
      return false
    }
    
    console.log('‚úÖ Conexi√≥n exitosa')
    console.log(`üìä Conversaciones disponibles: ${conversations?.length || 0}`)
    
    if (!conversations || conversations.length === 0) {
      console.log('‚ùå No hay conversaciones para probar')
      return false
    }
    
    // Test 4: Verificar suscripciones de Realtime
    console.log('\nüì° Test 4: Verificando suscripciones de Realtime...')
    
    let eventReceived = false
    let subscriptionStatus = 'unknown'
    let connectionState = 'unknown'
    
    const channel = supabase
      .channel('diagnose-test')
      .on(
        'postgres_changes',
        { event: 'UPDATE', schema: 'public', table: 'tb_conversations' },
        (payload) => {
          console.log('‚úÖ Evento Realtime recibido:', payload.eventType)
          console.log('üìä Datos del evento:', payload.new)
          eventReceived = true
        }
      )
      .subscribe((status) => {
        console.log('üì° Estado de suscripci√≥n:', status)
        subscriptionStatus = status
        
        // Verificar estado de la conexi√≥n
        if (supabase.realtime.connection) {
          connectionState = supabase.realtime.connection.readyState
          console.log('üîå Estado de conexi√≥n Realtime:', connectionState)
        }
      })
    
    // Esperar a que se conecte
    console.log('\n‚è≥ Esperando conexi√≥n de Realtime...')
    await new Promise(resolve => setTimeout(resolve, 5000))
    
    console.log('\nüîç Estado despu√©s de 5 segundos:')
    console.log('Estado de suscripci√≥n:', subscriptionStatus)
    console.log('Estado de conexi√≥n:', connectionState)
    console.log('Evento recibido:', eventReceived)
    
    // Test 5: Intentar diferentes tipos de eventos
    console.log('\nüß™ Test 5: Probando diferentes tipos de eventos...')
    
    // Crear un canal para INSERT
    const insertChannel = supabase
      .channel('insert-test')
      .on(
        'postgres_changes',
        { event: 'INSERT', schema: 'public', table: 'tb_conversations' },
        (payload) => {
          console.log('‚úÖ Evento INSERT recibido:', payload.eventType)
        }
      )
      .subscribe((status) => {
        console.log('üì° Estado de suscripci√≥n INSERT:', status)
      })
    
    // Crear un canal para DELETE
    const deleteChannel = supabase
      .channel('delete-test')
      .on(
        'postgres_changes',
        { event: 'DELETE', schema: 'public', table: 'tb_conversations' },
        (payload) => {
          console.log('‚úÖ Evento DELETE recibido:', payload.eventType)
        }
      )
      .subscribe((status) => {
        console.log('üì° Estado de suscripci√≥n DELETE:', status)
      })
    
    // Esperar m√°s tiempo
    await new Promise(resolve => setTimeout(resolve, 3000))
    
    // Test 6: Verificar si hay problemas de permisos
    console.log('\nüîí Test 6: Verificando permisos...')
    
    try {
      const { data: testUpdate, error: permError } = await supabase
        .from('tb_conversations')
        .update({ updated_at: new Date().toISOString() })
        .eq('id', conversations[0].id)
        .select()
      
      if (permError) {
        console.log('‚ùå Error de permisos en UPDATE:', permError.message)
      } else {
        console.log('‚úÖ Permisos de UPDATE funcionando')
      }
    } catch (e) {
      console.log('‚ö†Ô∏è Error verificando permisos:', e.message)
    }
    
    // Test 7: Verificar configuraci√≥n del cliente
    console.log('\n‚öôÔ∏è Test 7: Verificando configuraci√≥n del cliente...')
    
    console.log('URL de Supabase:', SUPABASE_URL)
    console.log('Clave an√≥nima:', SUPABASE_ANON_KEY.substring(0, 20) + '...')
    console.log('Configuraci√≥n de Realtime:', supabase.realtime)
    
    // Limpiar suscripciones
    channel.unsubscribe()
    insertChannel.unsubscribe()
    deleteChannel.unsubscribe()
    
    // Resumen final
    console.log('\n' + '=' * 50)
    console.log('üìä RESUMEN DEL DIAGN√ìSTICO:')
    console.log(`üîå Conexi√≥n b√°sica: ‚úÖ`)
    console.log(`üì° Suscripciones Realtime: ${subscriptionStatus === 'SUBSCRIBED' ? '‚úÖ' : '‚ùå'}`)
    console.log(`üîå Estado de conexi√≥n: ${connectionState === 1 ? '‚úÖ Conectado' : connectionState === 0 ? '‚è≥ Conectando' : '‚ùå Desconectado'}`)
    console.log(`üì® Eventos recibidos: ${eventReceived ? '‚úÖ' : '‚ùå'}`)
    
    // Recomendaciones
    console.log('\nüí° RECOMENDACIONES:')
    
    if (subscriptionStatus !== 'SUBSCRIBED') {
      console.log('‚Ä¢ ‚ùå Las suscripciones no se est√°n conectando correctamente')
      console.log('‚Ä¢ üîß Verificar configuraci√≥n de Realtime en Supabase Dashboard')
    }
    
    if (connectionState !== 1) {
      console.log('‚Ä¢ ‚ùå La conexi√≥n Realtime no est√° establecida')
      console.log('‚Ä¢ üîß Verificar configuraci√≥n de WebSockets en Supabase')
    }
    
    if (!eventReceived) {
      console.log('‚Ä¢ ‚ùå No se est√°n recibiendo eventos de la base de datos')
      console.log('‚Ä¢ üîß Verificar que las tablas est√©n habilitadas para Realtime')
      console.log('‚Ä¢ üîß Verificar permisos de la clave an√≥nima')
    }
    
    if (subscriptionStatus === 'SUBSCRIBED' && connectionState === 1 && eventReceived) {
      console.log('‚Ä¢ ‚úÖ Realtime est√° funcionando correctamente')
      console.log('‚Ä¢ üîß El problema puede estar en la aplicaci√≥n React')
    }
    
    return subscriptionStatus === 'SUBSCRIBED' && connectionState === 1 && eventReceived
    
  } catch (error) {
    console.log('‚ùå Error general en diagn√≥stico:', error)
    return false
  }
}

// Ejecutar el diagn√≥stico
diagnoseRealtime()
  .then(success => {
    console.log('\nüèÅ Diagn√≥stico completado. Realtime funcionando:', success)
    process.exit(success ? 0 : 1)
  })
  .catch(error => {
    console.log('‚ùå Error fatal en diagn√≥stico:', error)
    process.exit(1)
  })

import { createClient } from '@supabase/supabase-js'

// Configuraci√≥n de Supabase
const SUPABASE_URL = "https://avkpygwhymnxotwqzknz.supabase.co"
const SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImF2a3B5Z3doeW1ueG90d3F6a256Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTMzMjEyMDcsImV4cCI6MjA2ODg5NzIwN30.p97K1S3WYNAeYb-ExRpRp3J_pqFegFJ11VOe5th_xHk"

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY)

console.log('üöÄ INICIANDO TEST DE SINCRONIZACI√ìN AUTOMATIZADO')
console.log('=' * 60)

async function testRealtimeSync() {
  try {
    // Test 1: Verificar conexi√≥n b√°sica
    console.log('\nüîå Test 1: Verificando conexi√≥n b√°sica...')
    const { data: conversations, error: connError } = await supabase
      .from('tb_conversations')
      .select('*')
      .limit(1)
    
    if (connError) {
      console.log('‚ùå Error de conexi√≥n:', connError.message)
      return false
    }
    
    console.log('‚úÖ Conexi√≥n exitosa')
    console.log(`üìä Conversaciones disponibles: ${conversations?.length || 0}`)
    
    if (!conversations || conversations.length === 0) {
      console.log('‚ùå No hay conversaciones para probar')
      return false
    }
    
    // Test 2: Verificar suscripciones de Realtime
    console.log('\nüì° Test 2: Verificando suscripciones de Realtime...')
    
    let eventReceived = false
    let subscriptionStatus = 'unknown'
    
    const channel = supabase
      .channel('test-sync-automated')
      .on(
        'postgres_changes',
        { event: 'UPDATE', schema: 'public', table: 'tb_conversations' },
        (payload) => {
          console.log('‚úÖ Evento Realtime recibido:', payload.eventType)
          console.log('üìä Datos del evento:', payload.new)
          eventReceived = true
        }
      )
      .subscribe((status) => {
        console.log('üì° Estado de suscripci√≥n:', status)
        subscriptionStatus = status
      })
    
    // Esperar a que se conecte
    await new Promise(resolve => setTimeout(resolve, 3000))
    
    if (subscriptionStatus === 'CHANNEL_ERROR') {
      console.log('‚ùå Error en suscripci√≥n de Realtime')
      return false
    }
    
    if (subscriptionStatus === 'SUBSCRIBED') {
      console.log('‚úÖ Suscripci√≥n de Realtime activa')
    } else {
      console.log('‚ö†Ô∏è Estado de suscripci√≥n inesperado:', subscriptionStatus)
    }
    
    // Test 3: Cambiar estado de una conversaci√≥n
    console.log('\nüß™ Test 3: Cambiando estado de conversaci√≥n...')
    
    const testConversation = conversations[0]
    console.log(`üéØ Conversaci√≥n de prueba: ${testConversation.id}`)
    console.log(`üìä Estado actual: ${testConversation.status}`)
    
    const newStatus = testConversation.status === 'pending_human' ? 'active_human' : 'pending_human'
    console.log(`üîÑ Cambiando estado a: ${newStatus}`)
    
    const { error: updateError } = await supabase
      .from('tb_conversations')
      .update({ status: newStatus })
      .eq('id', testConversation.id)
    
    if (updateError) {
      console.log('‚ùå Error actualizando conversaci√≥n:', updateError.message)
      return false
    }
    
    console.log('‚úÖ Estado cambiado en base de datos')
    console.log('‚è≥ Esperando evento Realtime...')
    
    // Esperar evento Realtime
    let timeout = false
    const timeoutPromise = new Promise(resolve => {
      setTimeout(() => {
        timeout = true
        resolve(false)
      }, 10000) // 10 segundos de timeout
    })
    
    const eventPromise = new Promise(resolve => {
      const checkEvent = () => {
        if (eventReceived) {
          resolve(true)
        } else if (!timeout) {
          setTimeout(checkEvent, 100)
        } else {
          resolve(false)
        }
      }
      checkEvent()
    })
    
    const eventResult = await Promise.race([eventPromise, timeoutPromise])
    
    if (eventResult) {
      console.log('‚úÖ Evento Realtime recibido exitosamente')
    } else {
      console.log('‚ùå Timeout esperando evento Realtime')
    }
    
    // Test 4: Verificar que el cambio se reflej√≥
    console.log('\nüîç Test 4: Verificando cambio en base de datos...')
    
    const { data: updatedConversation, error: verifyError } = await supabase
      .from('tb_conversations')
      .select('*')
      .eq('id', testConversation.id)
      .single()
    
    if (verifyError) {
      console.log('‚ùå Error verificando conversaci√≥n:', verifyError.message)
      return false
    }
    
    if (updatedConversation.status === newStatus) {
      console.log('‚úÖ Estado actualizado correctamente en base de datos')
    } else {
      console.log('‚ùå Estado no se actualiz√≥ correctamente')
      console.log(`üìä Esperado: ${newStatus}, Actual: ${updatedConversation.status}`)
    }
    
    // Test 5: Revertir el cambio
    console.log('\nüîÑ Test 5: Revirtiendo cambio...')
    
    const { error: revertError } = await supabase
      .from('tb_conversations')
      .update({ status: testConversation.status })
      .eq('id', testConversation.id)
    
    if (revertError) {
      console.log('‚ùå Error revirtiendo conversaci√≥n:', revertError.message)
    } else {
      console.log('‚úÖ Cambio revertido exitosamente')
    }
    
    // Limpiar suscripci√≥n
    channel.unsubscribe()
    
    // Resumen final
    console.log('\n' + '=' * 60)
    console.log('üìä RESUMEN DEL TEST:')
    console.log(`üîå Conexi√≥n: ${connError ? '‚ùå' : '‚úÖ'}`)
    console.log(`üì° Realtime: ${subscriptionStatus === 'SUBSCRIBED' ? '‚úÖ' : '‚ùå'}`)
    console.log(`üß™ Evento: ${eventResult ? '‚úÖ' : '‚ùå'}`)
    console.log(`üíæ Base de datos: ${updatedConversation?.status === newStatus ? '‚úÖ' : '‚ùå'}`)
    
    const allTestsPassed = !connError && subscriptionStatus === 'SUBSCRIBED' && eventResult && updatedConversation?.status === newStatus
    
    if (allTestsPassed) {
      console.log('\nüéâ ¬°TODOS LOS TESTS PASARON! La sincronizaci√≥n funciona correctamente')
      return true
    } else {
      console.log('\n‚ùå Algunos tests fallaron. Revisa los logs anteriores')
      return false
    }
    
  } catch (error) {
    console.log('‚ùå Error general en test:', error)
    return false
  }
}

// Ejecutar el test
testRealtimeSync()
  .then(success => {
    console.log('\nüèÅ Test completado. √âxito:', success)
    process.exit(success ? 0 : 1)
  })
  .catch(error => {
    console.log('‚ùå Error fatal:', error)
    process.exit(1)
  })
